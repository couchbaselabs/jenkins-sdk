# This file declaratively says what performance tests should be run, and where they should be run.
# The tools will work out all permutations of runs from this.
# They will interrogate the database and see what runs already exist.
# Any runs that need running, will be.

servers:
  # This is where the performers should run.  Currently only "localhost" is supported.
  # In future we want to supported scp-ing the performers to a remote host.
  performer: localhost

  driver:
    # Where the driver runs.  Currently only "localhost" is supported.
    hostname: localhost

    # WARNING: files under this location will be modified.  Make sure you have a backup or have committed local changes.
    # Under this location will need these folders:
    #
    # transactions-fit-performer
    #
    # If want to test JVM:
    # couchbase-jvm-clients
    source: /home/ec2-user

# Generally only CI should be talking to production database.  For local performance testing, spin up a localhost database.
# The password gets replaced by an environment variable when running on CI
database:
  # When run by jenkins-sdk, jenkins-sdk will use `hostname`, and the driver will use `hostname_docker`.
  # They need to be separate to allow the driver to connect to the database when both are running inside Docker.
  hostname: performance.sdk.couchbase.com
  hostname_docker: performance.sdk.couchbase.com
  port: 5432
  username: postgres
  # This isn't the real production password!  It gets overridden on CI via a CLI argument.
  password: password
  database: perf

environment:
  # Can override any executables here, to workaround environmental/path issues.
  executables:
  #    docker: /usr/bin/docker
    #docker: "c:\\Program/ Files\\Docker\\Docker\\resources\\bin\\docker.exe"

  # These will be added to environment variables when running executables
  envvar:
#    DOCKER_HOST: cbdyncluster docker-host docker ps

  # The workspace directory is where all temporary files will be placed
  workspace: workspace

# These settings will not be saved to the database
variables:
  # Outputs what would be performed, without actually performing it.  Config files still get written.
  dryRun: false

  # Whether to ignore whatever runs are already in the database
  force: false

  # If confident that Docker images are built and up-to-date
  skipDriverDockerBuild: false
  skipPerformerDockerBuild: false

  # How many times we require each permutation to be run.  Smoothes out variance.
  runsRequired: 1

  # Whether the failure of an individual job should stop everything.
  stopOnFailure: false

matrix:
  clusters:
    # Currently CI is hardcoded to look for one cluster written in a specific format, so it can replace the hostname.
    # Update: now "two" clusters, for stellar-nebula testing
    # In future, may return to having jenkins-sdk control cluster creation (CBD-4948)
    - type: unmanaged
      connection_string_driver: couchbase://localhost
      connection_string_performer: couchbase://localhost
      hostname_rest: http://localhost:8091
    # When run by jenkins-sdk, jenkins-sdk will use `connection_string`, and the driver will use `connection_string_docker`.
    # They need to be separate to allow the driver to connect to the cluster when both are running inside Docker.
      connection_string_driver_docker: couchbase://cbs
      connection_string_performer_docker: couchbase://cbs
      hostname_rest_docker: http://cbs:8091
      storage: couchstore
      replicas: 0
    # A number of other fields will get filled in dynamically, both by CI and by jenkins-sdk.  Uncomment the below
    # to help with localhost testing against a copy of the prod database.
    # Remember to also change top-level variables.
    # topology: A
    # version: 7.1.1-3175-enterprise
    # cpuCount: 16
    # instance: c5.4xlarge
    # nodeCount: 1
    # compaction: disabled
    # memory: 28000

    # Localhost CNG couchbase2 testing.
    # There is hard-coded filter logic elsewhere that ensures that only SDK versions that support couchbase2:// will run
    # these tests.
    # Removing for now due to ING-716
#    - type: unmanaged
#      connection_string_driver: couchbase://localhost
#      connection_string_performer: couchbase2://localhost
#      hostname_rest: http://localhost:8091
#      hostname_rest_docker: http://cbs:8091
#      connection_string_driver_docker: couchbase://cbs
#      connection_string_performer_docker: couchbase2://cng
#      insecure: true
#      storage: couchstore
#      replicas: 0

  implementations:
    - language: Java
      version: snapshot

      # If changing or adding any Gerrit patches, may need to make changes in ConfigParser

    - language: Scala
      version: 1.X.X

    - language: Scala
      version: snapshot

    # Kotlin performer not building: https://couchbase.slack.com/archives/C033YPWT6DC/p1701947947253859?thread_ts=1701771863.911269&cid=C033YPWT6DC
#    - language: Kotlin
#      version: snapshot

    # https://couchbase.slack.com/archives/C033YPWT6DC/p1692090337345279?thread_ts=1692029200.583649&cid=C033YPWT6DC
    - language: .NET
      version: 3.3.X

    - language: .NET
      version: 3.4.X

    - language: .NET
      version: 3.5.X

    - language: .NET
      version: 3.6.X

    - language: .NET
      version: snapshot

    # Earliest version the Go performer can compile is 2.3.0 (possibly earlier)
    # Go needs SDKQE-2831 to avoid 'bad scheme' errors
    - language: Go
      version: 2.3.X

    - language: Go
      version: 2.4.X

    - language: Go
      version: 2.5.X

    - language: Go
      version: 2.6.X

    - language: Go
      version: 2.7.X

    - language: Go
      version: 2.8.X

    - language: Go
      version: 2.9.X

    - language: Go
      version: snapshot

    - language: Python
      version: snapshot

    - language: Python
      version: 4.1.X

    - language: Python
      version: 4.2.X

    - language: Python
      version: 4.3.X

    - language: C++
      version: snapshot

    - language: C++
      version: 1.X.X

    - language: Node
      version: snapshot

    - language: Node
      version: 4.2.X

    - language: Node
      version: 4.3.X

    - language: Node
      version: 4.4.X

    - language: Ruby
      version: 3.4.X

    - language: Ruby
      version: 3.5.X

    - language: Ruby
      version: snapshot

  workloads:

    # KV replaces
    - operations:
        - op: replace
          bounds:
            forSeconds: $forSeconds
          docLocation:
            method: pool
            poolSize: $poolSize
            poolSelectionStrategy: counter
      settings:
        variables:
          - name: poolSize
            value: 10000
      exclude:
        - protostellar: true
        - gerrit: true        # As Gerrit excluded by default

    # KV gets
    - operations:
        - op: get
          bounds:
            forSeconds: $forSeconds
          docLocation:
            method: pool
            poolSize: $poolSize
            poolSelectionStrategy: randomUniform
      settings:
        variables:
          - name: poolSize
            value: 10000
      exclude:
        - gerrit: true

    # KV gets - experiment for testing different horizontal scaling values
    - operations:
        - op: get
          bounds:
            forSeconds: $forSeconds
          docLocation:
            method: pool
            poolSize: $poolSize
            poolSelectionStrategy: randomUniform

      settings:
        variables:
          - name: poolSize
            value: 10000
          - name: horizontalScaling
            values: [1, 2, 4, 8, 16, 32]
          # Just make it easier to find these results
          - name: experimentName
            values: [ "horizontalScaling" ]
      include:
        # Expensive to run against every version of every SDK, so just test the latest.
        - version: snapshot
      exclude:
        - gerrit: true        # As Gerrit excluded by default

    # KV inserts
    - operations:
        - op: insert
          bounds:
            forSeconds: $forSeconds
          docLocation:
            method: uuid
      settings:
        variables:
          - name: docNum
            value: 10000000
      exclude:
        - protostellar: true
        - gerrit: true

    # Write transactions
    - operations:
        - transaction:
            ops:
              - op: replace
                docLocation:
                  method: pool
                  poolSize: $poolSize
                  poolSelectionStrategy: randomUniform
              - op: insert
                docLocation:
                  method: uuid
            bounds:
              forSeconds: $forSeconds
      settings:
        variables:
          - name: poolSize
            value: 10000
      include:
        - language: Java
          # Note this will include all versions from 3.3.0
          version: 3.3.0
        - language: Go
          version: 2.5.3
        - language: C++
          version: snapshot
      exclude:
        - protostellar: true # As Protostellar doesn't support transactions
        - gerrit: true       # As we exclude these by default

    # Read-only transactions
    - operations:
        - transaction:
            ops:
              - op: get
                docLocation:
                  method: pool
                  poolSize: $poolSize
                  poolSelectionStrategy: randomUniform
            bounds:
              forSeconds: $forSeconds
      settings:
        variables:
          - name: poolSize
            value: 10000
      # This is a new test so just running on snapshot for now.  These languages because their performers support transactions.
      include:
        - language: Java
          version: snapshot
        - language: C++
          version: snapshot
        - language: Go
          version: snapshot
      exclude:
        - protostellar: true # As Protostellar doesn't support transactions
        - gerrit: true       # As we exclude these by default

# Top-level variables can be overwritten on a per-workload basis.
settings:
  # These GRPC settings are believed to give good results (CBD-4975).  GRPC settings don't get written to the
  # database, as streaming back results shouldn't affect the results themselves.  So changing these settings
  # will not trigger any reruns.
  grpc:
    flowControl: true
    batch: 1000
    compression: true
  variables:
    # 5 minutes is completely arbitrary, and we may need to reduce it in future as the permutations grow.
    #  However, this length has proved useful for various reasons:
    #  a) we need to trim off some seconds from the start to accommodate e.g. JVM warmup
    #  b) it's proven long enough for performers that aren't correctly streaming back results to OOM - better to fail and know
    #  c) it's _maybe_ long enough to catch SDK memory leaks and other over-time issues.  Hasn't been proven either way,
    #     but it does 'feel' like the minimum that might catch such errors.
    # (b) and (c) could be addressed by a dedicated smaller set of long soak tests, though.
    - name: forSeconds
      value: 300
    - name: horizontalScaling
      values: [1,20]
    # All tests get run against all supported APIs by default.  There is code logic that filters to the APIs each SDK
    # actually supports.
    - name: api
      values: ["DEFAULT", "ASYNC"]
    - name: concurrencyMechanism
      type: tunable
      value: multiprocessing
      include:
        - implementation:
            language: Python
